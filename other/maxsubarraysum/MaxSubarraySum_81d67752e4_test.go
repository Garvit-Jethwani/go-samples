/*
Test generated by RoostGPT for test go-unit-sample using AI Type Open AI and AI Model gpt-4

1. Test with an empty array: The function should return 0 as there are no elements in the array.

2. Test with an array of positive numbers: The function should return the sum of all elements as the maximum subarray sum.

3. Test with an array of negative numbers: The function should return the maximum element in the array as the maximum subarray sum as all sums will be negative.

4. Test with an array containing both positive and negative numbers: The function should return the maximum sum of the contiguous subarray.

5. Test with an array of all zeros: The function should return 0 as all elements are zero.

6. Test with an array of one element: The function should return the element itself as the maximum subarray sum.

7. Test with an array containing both positive and negative numbers where the maximum subarray sum is obtained from the sum of non-contiguous elements: The function should still return the maximum sum of the contiguous subarray.

8. Test with an array where the maximum subarray sum is obtained from the sum of the first few elements: This checks whether the function correctly stops adding elements to the sum when it encounters a number that lowers the sum.

9. Test with an array where the maximum subarray sum is obtained from the sum of the last few elements: This checks whether the function correctly starts a new sum when it encounters a number that increases the overall sum.

10. Test with large numbers: This checks whether the function can handle large inputs and whether there are any overflow issues.

11. Test with a large array: This checks the function's performance with a large number of elements.
*/
package maxsubarraysum

import (
	"math"
	"testing"
)

func TestMaxSubarraySum_81d67752e4(t *testing.T) {
	// Test cases
	tests := []struct {
		name     string
		array    []int
		expected int
	}{
		{name: "Test with an empty array", array: []int{}, expected: 0},
		{name: "Test with an array of positive numbers", array: []int{1, 2, 3, 4, 5}, expected: 15},
		{name: "Test with an array of negative numbers", array: []int{-1, -2, -3, -4, -5}, expected: -1},
		{name: "Test with an array containing both positive and negative numbers", array: []int{1, -2, 3, -4, 5}, expected: 5},
		{name: "Test with an array of all zeros", array: []int{0, 0, 0, 0, 0}, expected: 0},
		{name: "Test with an array of one element", array: []int{1}, expected: 1},
		{name: "Test with an array containing both positive and negative numbers where the maximum subarray sum is obtained from the sum of non-contiguous elements", array: []int{1, -2, 3, -4, 5, -6, 7, -8, 9}, expected: 10},
		{name: "Test with an array where the maximum subarray sum is obtained from the sum of the first few elements", array: []int{10, 20, -50, 30, 40}, expected: 30},
		{name: "Test with an array where the maximum subarray sum is obtained from the sum of the last few elements", array: []int{10, -20, 50, 30, 40}, expected: 120},
		{name: "Test with large numbers", array: []int{math.MaxInt32, -math.MaxInt32, math.MaxInt32}, expected: math.MaxInt32},
		{name: "Test with a large array", array: createLargeArray(), expected: 1000000},
	}

	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			result := MaxSubarraySum(tc.array)
			if result != tc.expected {
				t.Errorf("MaxSubarraySum() = %v; want %v", result, tc.expected)
			} else {
				t.Logf("Success: %s", tc.name)
			}
		})
	}
}

// Helper function to create a large array for testing the function's performance
func createLargeArray() []int {
	array := make([]int, 1000000)
	for i := 0; i < 1000000; i++ {
		array[i] = 1
	}
	return array
}
