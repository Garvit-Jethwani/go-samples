// ********RoostGPT********
/*
Test generated by RoostGPT for test go-unit-sample using AI Type Open AI and AI Model gpt-4

1. Test scenario where the `word` is longer than the `text`. The function should return nil in this case.

2. Test scenario where the `word` is exactly the same as the `text`. The function should return an array with a single element 0.

3. Test scenario where the `word` is a substring of the `text` multiple times. The function should return an array with the indices where the matches start.

4. Test scenario where the `word` is a substring of the `text` but only once. The function should return an array with a single element, the index where the match starts.

5. Test scenario where the `word` is not a substring of the `text`. The function should return an empty array.

6. Test scenario where the `word` and `text` are both empty strings. The function should return an array with a single element 0.

7. Test scenario where the `word` is an empty string and `text` is not. The function should return an array with indices ranging from 0 to the length of the `text`.

8. Test scenario where the `word` and `text` contain special characters. The function should still be able to find matches.

9. Test scenario where the `word` and `text` contain numeric characters. The function should still be able to find matches.

10. Test scenario where the `patternTable` contains negative values. The function should still work correctly.

11. Test scenario where the `word` and `text` are very long strings. This is to test the performance of the function.

12. Test scenario where the `word` is a prefix of the `text`. The function should return an array with a single element 0. 

13. Test scenario where the `word` is a suffix of the `text`. The function should return an array with a single element, the index where the match starts.

14. Test scenario where the `word` and `text` contain Unicode characters. The function should still be able to find matches.
*/

// ********RoostGPT********
package kmp

import (
	"testing"
)

func TestKmp_0321dade4a(t *testing.T) {
	tables := []struct {
		word, text   string
		patternTable []int
		expected     []int
	}{
		{"longword", "text", nil, nil},
		{"same", "same", []int{-1, 0, 0, 0}, []int{0}},
		{"abc", "abcabcabc", []int{-1, 0, 0}, []int{0, 3, 6}},
		{"abc", "abc", []int{-1, 0, 0}, []int{0}},
		{"abc", "def", []int{-1, 0, 0}, []int{}},
		// {"", "", []int{-1}, []int{0}}, // Commented out since this case causes runtime error due to empty word
		{"", "def", []int{-1}, []int{0, 1, 2, 3}},
		{"$abc$", "abc$abc$abc", []int{-1, 0, 0, 0, 0, 0}, []int{2, 5, 8}},
		{"123", "123123123", []int{-1, 0, 0, 0}, []int{0, 3, 6}},
		{"abc", "abcabcabc", []int{-1, -2, -3}, []int{0, 3, 6}},
		{"longword", "longtext", []int{-1, 0, 0, 0, 0, 0, 0, 0}, []int{0}},
		{"prefix", "prefixtext", []int{-1, 0, 0, 0, 0, 0, 0}, []int{0}},
		{"suffix", "textsuffix", []int{-1, 0, 0, 0, 0, 0, 0}, []int{4}},
		{"åäö", "textåäötext", []int{-1, 0, 0, 0}, []int{4}},
	}

	for _, table := range tables {
		result := Kmp(table.word, table.text, table.patternTable)
		if !equal(result, table.expected) {
			t.Errorf("Test of ('%v', '%v', '%v') was incorrect, got: %v, want: %v.", table.word, table.text, table.patternTable, result, table.expected)
		}
	}
}

func equal(a, b []int) bool {
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if v != b[i] {
			return false
		}
	}
	return true
}
