/*
Test generated by RoostGPT for test golang-sample-programs using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Test with an empty string. The function should return true since an empty string is considered as a palindrome.

2. Test Scenario: Test with a single character string. The function should return true as a string with a single character is a palindrome.

3. Test Scenario: Test with a string that is a palindrome. The function should return true. Example: "madam"

4. Test Scenario: Test with a string that is not a palindrome. The function should return false. Example: "hello"

5. Test Scenario: Test with a string that has spaces but is a palindrome. The function should return true. Example: "A man a plan a canal Panama"

6. Test Scenario: Test with a string that has mixed case but is a palindrome. The function should return false as it is case sensitive. Example: "Madam"

7. Test Scenario: Test with a string that includes punctuation and is a palindrome. The function should return false as it only checks for character equality and doesn't ignore punctuation. Example: "Able, was I saw Elba."

8. Test Scenario: Test with a string that includes numbers. If it's a palindrome, the function should return true, otherwise false. Example: "12321"

9. Test Scenario: Test with a string that includes special characters. If it's a palindrome, the function should return true, otherwise false. Example: "@@@"

10. Test Scenario: Test with a very long string to check if the function handles large inputs without stack overflow.

11. Test Scenario: Test with non-ASCII characters. The function should accurately determine if these strings are palindromes. Example: "åbba"
*/
package palindrome

import (
	"strings"
	"testing"
)

func TestIsPalindromeRecursiveHelper_6ebf394e0a(t *testing.T) {

	tests := []struct {
		name     string
		input    string
		expected bool
	}{
		{
			name:     "Test with empty string",
			input:    "",
			expected: true,
		},
		{
			name:     "Test with a single character string",
			input:    "a",
			expected: true,
		},
		{
			name:     "Test with a palindrome string",
			input:    "madam",
			expected: true,
		},
		{
			name:     "Test with a non-palindrome string",
			input:    "hello",
			expected: false,
		},
		{
			name:     "Test with a string that has spaces but is a palindrome",
			input:    "A man a plan a canal Panama",
			expected: false,
		},
		{
			name:     "Test with a string that has mixed case but is a palindrome",
			input:    "Madam",
			expected: false,
		},
		{
			name:     "Test with a string that includes punctuation and is a palindrome",
			input:    "Able, was I saw Elba.",
			expected: false,
		},
		{
			name:     "Test with a string that includes numbers",
			input:    "12321",
			expected: true,
		},
		{
			name:     "Test with a string that includes special characters",
			input:    "@@@",
			expected: true,
		},
		{
			name:     "Test with a very long string",
			input:    strings.Repeat("a", 1<<20) + "b" + strings.Repeat("a", 1<<20),
			expected: false,
		},
		{
			name:     "Test with non-ASCII characters",
			input:    "åbba",
			expected: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			runes := []rune(tt.input)
			if got := isPalindromeRecursiveHelper(runes, 0, int64(len(runes))); got != tt.expected {
				t.Errorf("isPalindromeRecursiveHelper() = %v, want %v", got, tt.expected)
			}
		})
	}
}
