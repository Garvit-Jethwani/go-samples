/*
Test generated by RoostGPT for test golang-sample-programs using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Empty String
  - Description: The function should return true when the given string is empty as an empty string is considered as a palindrome.

2. Test Scenario: Single Character String
  - Description: The function should return true when the given string consists of a single character as a single character string is a palindrome.

3. Test Scenario: Palindrome String
  - Description: The function should return true when the given string is a palindrome (same forward and backward).

4. Test Scenario: Non-Palindrome String
  - Description: The function should return false when the given string is not a palindrome.

5. Test Scenario: Palindrome String with Spaces
  - Description: The function should return true when the given string is a palindrome with spaces. The spaces should be ignored when checking for a palindrome.

6. Test Scenario: Palindrome String with Punctuation
  - Description: The function should return true when the given string is a palindrome with punctuation. The punctuation should be ignored when checking for a palindrome.

7. Test Scenario: Palindrome String with Mixed Case
  - Description: The function should return true when the given string is a palindrome with mixed case. The case should be ignored when checking for a palindrome.

8. Test Scenario: Palindrome String with Special Characters
  - Description: The function should return true when the given string is a palindrome with special characters. The special characters should be ignored when checking for a palindrome.

9. Test Scenario: Non-Palindrome String with Special Characters
  - Description: The function should return false when the given string is not a palindrome and contains special characters.

10. Test Scenario: Palindrome String with Numbers
  - Description: The function should return true when the given string is a palindrome and contains numbers.

11. Test Scenario: Non-Palindrome String with Numbers
  - Description: The function should return false when the given string is not a palindrome and contains numbers.
*/
package palindrome

import (
	"testing"
)

// TestIsPalindromeRecursive_9c3315538c is a test function for IsPalindromeRecursive
func TestIsPalindromeRecursive_9c3315538c(t *testing.T) {
	testCases := []struct {
		name     string
		input    string
		expected bool
	}{
		{
			name:     "Empty String",
			input:    "",
			expected: true,
		},
		{
			name:     "Single Character String",
			input:    "a",
			expected: true,
		},
		{
			name:     "Palindrome String",
			input:    "madam",
			expected: true,
		},
		{
			name:     "Non-Palindrome String",
			input:    "hello",
			expected: false,
		},
		{
			name:     "Palindrome String with Spaces",
			input:    "a man a plan a canal panama",
			expected: true,
		},
		{
			name:     "Palindrome String with Punctuation",
			input:    "Able, was I saw Elba",
			expected: true,
		},
		{
			name:     "Palindrome String with Mixed Case",
			input:    "Madam",
			expected: true,
		},
		{
			name:     "Palindrome String with Special Characters",
			input:    "A man, a plan, a canal: Panama.",
			expected: true,
		},
		{
			name:     "Non-Palindrome String with Special Characters",
			input:    "Hello, world!",
			expected: false,
		},
		{
			name:     "Palindrome String with Numbers",
			input:    "12321",
			expected: true,
		},
		{
			name:     "Non-Palindrome String with Numbers",
			input:    "12345",
			expected: false,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			if result := IsPalindromeRecursive(tc.input); result != tc.expected {
				t.Errorf("IsPalindromeRecursive(%v) => %v, expected %v", tc.input, result, tc.expected)
			}
		})
	}
}
