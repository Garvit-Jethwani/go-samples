/*
Test generated by RoostGPT for test golang-sample-programs using AI Type Open AI and AI Model gpt-4

 1. Test Scenario: Input String with Uppercase Letters
    Description: Test if the function properly converts uppercase letters to lowercase.
    Input: "Hello World"
    Expected Output: "helloworld"

 2. Test Scenario: Input String with Special Characters
    Description: Test if the function properly removes special characters from the string.
    Input: "Hello@World#"
    Expected Output: "helloworld"

 3. Test Scenario: Input String with Numbers
    Description: Test if the function properly retains numbers in the string.
    Input: "Hello123World456"
    Expected Output: "hello123world456"

 4. Test Scenario: Input String with Whitespaces
    Description: Test if the function properly removes whitespaces from the string.
    Input: "Hello    World"
    Expected Output: "helloworld"

 5. Test Scenario: Input String with Non-English Characters
    Description: Test if the function properly retains non-English characters in the string.
    Input: "HÃ©llo WÃ¸rld"
    Expected Output: "hÃ©llowÃ¸rld"

 6. Test Scenario: Input String with Unicode Characters
    Description: Test if the function properly retains Unicode characters in the string.
    Input: "Hello ðŸ˜Š World"
    Expected Output: "helloðŸ˜Šworld"

 7. Test Scenario: Empty Input String
    Description: Test if the function returns an empty string when the input is an empty string.
    Input: ""
    Expected Output: ""

 8. Test Scenario: Input String with Only Special Characters
    Description: Test if the function returns an empty string when the input string only contains special characters.
    Input: "@#$$%^&*()"
    Expected Output: ""

 9. Test Scenario: Input String with Only Whitespaces
    Description: Test if the function returns an empty string when the input string only contains whitespaces.
    Input: "     "
    Expected Output: ""

 10. Test Scenario: Input String with Mixed Cases
    Description: Test if the function properly converts all uppercase letters to lowercase and retains all other characters.
    Input: "HeLLo WoRLD"
    Expected Output: "helloworld"
*/
package palindrome

import (
	"testing"
)

func TestCleanString_3f6a89d5cb(t *testing.T) {
	testCases := []struct {
		name           string
		input          string
		expectedOutput string
	}{
		{
			name:           "Input String with Uppercase Letters",
			input:          "Hello World",
			expectedOutput: "helloworld",
		},
		{
			name:           "Input String with Special Characters",
			input:          "Hello@World#",
			expectedOutput: "helloworld",
		},
		{
			name:           "Input String with Numbers",
			input:          "Hello123World456",
			expectedOutput: "hello123world456",
		},
		{
			name:           "Input String with Whitespaces",
			input:          "Hello    World",
			expectedOutput: "helloworld",
		},
		{
			name:           "Input String with Non-English Characters",
			input:          "HÃ©llo WÃ¸rld",
			expectedOutput: "hÃ©llowÃ¸rld",
		},
		{
			name:           "Input String with Unicode Characters",
			input:          "Hello ðŸ˜Š World",
			expectedOutput: "helloðŸ˜Šworld",
		},
		{
			name:           "Empty Input String",
			input:          "",
			expectedOutput: "",
		},
		{
			name:           "Input String with Only Special Characters",
			input:          "@#$%^&*()",
			expectedOutput: "",
		},
		{
			name:           "Input String with Only Whitespaces",
			input:          "     ",
			expectedOutput: "",
		},
		{
			name:           "Input String with Mixed Cases",
			input:          "HeLLo WoRLD",
			expectedOutput: "helloworld",
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			output := cleanString(tc.input)
			if output != tc.expectedOutput {
				t.Logf("Test %v failed. Expected %v but got %v", tc.name, tc.expectedOutput, output)
				t.Fail()
			} else {
				t.Logf("Test %v passed. Expected %v and got %v", tc.name, tc.expectedOutput, output)
			}
		})
	}
}
