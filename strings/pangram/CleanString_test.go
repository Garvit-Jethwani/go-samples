// ********RoostGPT********
/*
Test generated by RoostGPT for test go-unit-sample using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=cleanString_016ffe4415
ROOST_METHOD_SIG_HASH=cleanString_2d86bff8f0

Scenario 1: Testing with a normal string

Details:
    Description: This test is meant to check if the function correctly cleans a normal string. The string will be in mixed case and will include spaces, special characters and numbers.
Execution:
    Arrange: Define a string variable 'text' with the value "Hello, World! 123".
    Act: Invoke cleanString with 'text' as the parameter.
    Assert: Use Go's testing facilities to check if the returned string is "helloworld123".
Validation:
    The assertion checks if all special characters and spaces have been removed and all letters have been converted to lowercase. This test is important to make sure the function works correctly in normal scenarios.

Scenario 2: Testing with a string that only contains special characters

Details:
    Description: This test is meant to check if the function correctly cleans a string that only contains special characters. 
Execution:
    Arrange: Define a string variable 'text' with the value "!@#$%^&*()_+".
    Act: Invoke cleanString with 'text' as the parameter.
    Assert: Use Go's testing facilities to check if the returned string is "".
Validation:
    The assertion checks if all special characters have been removed. This test is important to make sure the function works correctly with strings that only contain special characters.

Scenario 3: Testing with an empty string

Details:
    Description: This test is meant to check if the function correctly handles an empty string. 
Execution:
    Arrange: Define a string variable 'text' with the value "".
    Act: Invoke cleanString with 'text' as the parameter.
    Assert: Use Go's testing facilities to check if the returned string is "".
Validation:
    The assertion checks if the function correctly handles an empty string. This test is important to make sure the function works correctly with empty strings.

Scenario 4: Testing with a string that only contains spaces

Details:
    Description: This test is meant to check if the function correctly cleans a string that only contains spaces. 
Execution:
    Arrange: Define a string variable 'text' with the value "      ".
    Act: Invoke cleanString with 'text' as the parameter.
    Assert: Use Go's testing facilities to check if the returned string is "".
Validation:
    The assertion checks if all spaces have been removed. This test is important to make sure the function works correctly with strings that only contain spaces.

Scenario 5: Testing with a string that contains non-ASCII characters

Details:
    Description: This test is meant to check if the function correctly cleans a string that contains non-ASCII characters.
Execution:
    Arrange: Define a string variable 'text' with the value "Héllo, Wörld! 123".
    Act: Invoke cleanString with 'text' as the parameter.
    Assert: Use Go's testing facilities to check if the returned string is "héllo,wörld123".
Validation:
    The assertion checks if non-ASCII characters are preserved and special characters and spaces are removed. This test is important to make sure the function works correctly with strings that contain non-ASCII characters.
*/

// ********RoostGPT********
package pangram

import (
	"testing"
)

func TestCleanString(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "Testing with a normal string",
			input:    "Hello, World! 123",
			expected: "helloworld123",
		},
		{
			name:     "Testing with a string that only contains special characters",
			input:    "!@#$%^&*()_+",
			expected: "",
		},
		{
			name:     "Testing with an empty string",
			input:    "",
			expected: "",
		},
		{
			name:     "Testing with a string that only contains spaces",
			input:    "     ",
			expected: "",
		},
		{
			name:     "Testing with a string that contains non-ASCII characters",
			input:    "Héllo, Wörld! 123",
			expected: "héllo,wörld123",
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			output := cleanString(test.input)
			if output != test.expected {
				t.Errorf("Test %s failed: got %v, expected %v", test.name, output, test.expected)
			} else {
				t.Logf("Test %s passed", test.name)
			}
		})
	}
}
