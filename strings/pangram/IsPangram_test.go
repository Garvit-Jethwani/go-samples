// ********RoostGPT********
/*
Test generated by RoostGPT for test go-unit-sample using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=IsPangram_7b224a6663
ROOST_METHOD_SIG_HASH=IsPangram_2a8b2fd8cb

Scenario 1: Valid Pangram

Details:
    Description: This test is meant to check if the function correctly identifies a valid pangram. A valid pangram is a sentence containing every letter of the alphabet at least once.
Execution:
    Arrange: Create a string that is a valid pangram.
    Act: Invoke the IsPangram function with the created pangram string.
    Assert: Assert that the returned value from the function is true.
Validation:
    The choice of assertion is to check if the function correctly identifies a valid pangram. The expected result is true as the input string is a valid pangram. This test is important to validate the basic functionality of the function.

Scenario 2: Invalid Pangram

Details:
    Description: This test is meant to check if the function correctly identifies an invalid pangram.
Execution:
    Arrange: Create a string that is not a valid pangram.
    Act: Invoke the IsPangram function with the created non-pangram string.
    Assert: Assert that the returned value from the function is false.
Validation:
    The choice of assertion is to check if the function correctly identifies an invalid pangram. The expected result is false as the input string is not a valid pangram. This test is important to ensure the function can correctly identify invalid pangrams.

Scenario 3: Empty String

Details:
    Description: This test is meant to check how the function handles an empty string.
Execution:
    Arrange: Create an empty string.
    Act: Invoke the IsPangram function with the empty string.
    Assert: Assert that the returned value from the function is false.
Validation:
    The choice of assertion is to check how the function handles an empty string. The expected result is false as an empty string cannot be a pangram. This test is important to ensure the function can handle edge cases.

Scenario 4: String with Non-Alphabetic Characters

Details:
    Description: This test is meant to check how the function handles strings with non-alphabetic characters.
Execution:
    Arrange: Create a string with non-alphabetic characters but still a valid pangram.
    Act: Invoke the IsPangram function with the created string.
    Assert: Assert that the returned value from the function is true.
Validation:
    The choice of assertion is to check how the function handles strings with non-alphabetic characters. The expected result is true as the input string is a valid pangram despite having non-alphabetic characters. This test is important to ensure the function can handle different types of input.
*/

// ********RoostGPT********
package pangram

import (
	"testing"
)

func TestIsPangram(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected bool
	}{
		{
			name:     "Valid Pangram",
			input:    "The quick brown fox jumps over the lazy dog",
			expected: true,
		},
		{
			name:     "Invalid Pangram",
			input:    "This sentence is not a pangram",
			expected: false,
		},
		{
			name:     "Empty String",
			input:    "",
			expected: false,
		},
		{
			name:     "String with Non-Alphabetic Characters",
			input:    "The quick brown fox jumps over the lazy dog 1234567890!@#$%^&*()",
			expected: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := IsPangram(tt.input)
			if got != tt.expected {
				t.Errorf("IsPangram() = %v, want %v", got, tt.expected)
			}
			t.Log("Test passed for ", tt.name)
		})
	}
}
