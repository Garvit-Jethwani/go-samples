# RoostGPT vars
TEST_NAME=Github-workflow-test                                                                  # Optional; Default is roost-test
LANGUAGE=go                                                                     # Optional; Default is java; Supports [java, go, python, csharp, nodejs]
AI_TYPE=openai                                                                  # Optional; Default is openai; Supports [openai, vertexai, azure_open_ai, open_source_ai]
PACKAGES_TO_SCAN=                                                              # Required for LANGUAGE=java, the package to scan and generate test for example - com.demo.sample
ITERATION=                                                                     # Optional; Default is 2
TIMEOUT=                                                                    # Optional; Default is 1 hour
TEST_TYPE=unit                                                                  # Optional; Default is unit Supports [unit, functional, artillery, artillery-api-spec, integration]
JAVA_BUILD_TOOL=             # Optional; Default is maven; Supports [maven, gradle]
MAX_DEPTH=                   # Optional; Default is -1; if MAX_DEPTH is -1, it will traverse all the sub directories else the maximum depth directories to look for
TEST_FRAMEWORK=gotest              # Optional; Default is "pytest" for Python, "gotest" for Golang, "JUnit4" for Java, "nunit" for CSharp, "jest" for Node.js, "postman" for Postman test-script. Supports [pytest, unittest] for Python, [gotest] for Golang, [JUnit4, JUnit5] for Java, [nunit] for Csharp, [jest] for Node.js, [postman, artillery, rest-assured] for [test_type: api-spec-test]
FUNCTIONS_TO_TEST=IsPalindrome
JAVA_VERSION=21          # Optional; List of function names to be tested, separated by comma. Name to be specified as module.[class.]method OR module.function
USE_ASSISTANT=               # Optional; Use Assistant feature in openai. Default:false
VERIFY_TEST=                 # Optional; Default is false, Supports [true, false]
VULNERABILITY_GEN=           # Optional; Default is false, Supports [true, false]

# License env vars
ROOST_DOMAIN=dev.roost.ai                                                       # Optional; Default is app.roost.ai
ROOST_TOKEN=${TOKEN}                               # Required, the Roost token
TELEMETRY=true                                                                  # Optional; Default is true, Supports [true, false], send telemetry data to roost, no private information is shared

# GIT env vars
GIT_TYPE=local                                                              # Default is github; Supports [github, gitlab, azure, bitbucket, local]
HOSTED_TYPE=                                                               # Default is cloud; Supports [cloud, hosted]
GIT_HOSTED_URL=                                                                 # Required if HOSTED_TYPE=hosted
USE_SSH=false                                                                   # Optional; Default is false; Supports [true, false]; SSH based auth for Git
LOCAL_PROJECT_PATH=/workspaces                                                            # Required if GIT_TYPE is local, Path to your workspace.
SOURCE_GIT_CLONE_URL=                                                           # Optional; the source repo clone URL
SOURCE_GIT_TOKEN=${GITHUB_TOKEN}                           # Required
SOURCE_OWNER_NAME=                                                      # Required
SOURCE_REPO_NAME=                                       # Required
SOURCE_REPO_ID=                                                                 # Required for GIT_TYPE=gitlab
SOURCE_PROJECT_NAME=                                                            # Required for GIT_TYPE=azure
SOURCE_PROJECT_ID=                        # Required for GIT_TYPE=bitbucket
SOURCE_BASE_BRANCH=master                                                       # Required
SOURCE_RELATIVE_DIRECTORY=strings/palindrome                                                    # Optional; the relative path of the repository
SAME_TARGET_DETAIL=true                                                         # Optional; Default true, Supports [true, false]
DESTINATION_GIT_CLONE_URL=                                                      # Optional; the destination repo clone URL
DESTINATION_GIT_TOKEN=${GITHUB_TOKEN}                                                          # Required if SAME_TARGET_DETAIL=false
DESTINATION_OWNER_NAME=                                                         # Required if SAME_TARGET_DETAIL=false
DESTINATION_REPO_NAME=                                                          # Required if SAME_TARGET_DETAIL=false
DESTINATION_REPO_ID=                                                            # Required if SAME_TARGET_DETAIL=false and GIT_TYPE=gitlab
DESTINATION_PROJECT_NAME=                                                       # Required for GIT_TYPE=azure
DESTINATION_PROJECT_ID=                   # Required if SAME_TARGET_DETAIL=false and GIT_TYPE=bitbucket
DESTINATION_BASE_BRANCH=                                                        # Required if SAME_TARGET_DETAIL=false

# Open AI env vars
OPENAI_API_MODEL=gpt-4                                                          # Optional; Default is gpt-4
OPENAI_API_KEY=${OPENAI_API_KEY}              # Required if AI_TYPE=openai

# Vertex AI env vars
VERTEX_FINE_TUNE=                                                          # Optional; Default is false, Supports [true, false]
VERTEX_PROJECT_ID=                                                              # Required if AI_TYPE=vertexai
VERTEX_REGION=                                                       # Required if AI_TYPE=vertexai and VERTEX_FINE_TUNE=true
VERTEX_BEARER_TOKEN=${VERTEX_BEARER_TOKEN}                                                           # Required if AI_TYPE=vertexai
VERTEX_MODEL=                                                         # Required if AI_TYPE=vertexai; Supports [text-bison, code-bison, codechat-bison]

# Azure Open AI env vars
AZURE_OPENAI_ENDPOINT=                                                         # Required if AI_TYPE=azure_open_ai
AZURE_DEPLOYMENT_NAME=                                                          # Required if AI_TYPE=azure_open_ai
AZURE_OPENAI_KEY=${AZURE_OPENAI_KEY}                                                               # Required if AI_TYPE=azure_open_ai
AZURE_OPENAI_VERSION=        # Optional Default is 2023-12-01-preview

# Open source env vars
OPEN_SOURCE_MODEL_ENDPOINT=                                                     # Required if AI_TYPE=open_source_ai
OPEN_SOURCE_MODEL=                                                              # Optional; Supports [meta-llama/Llama-2-13b-chat, HuggingFaceH4/starchat-beta]

# Sagemaker model env vars
SAGEMAKER_MODEL_ENDPOINT=    # Required if AI_TYPE=sagemake_model

# Claude AI env vars 
CLAUDE_AI_MODEL=             # Required if AI_TYPE=claude_ai
CLAUDE_AI_API_KEY=${CLAUDE_AI_API_KEY}           # Required if AI_TYPE=claude_ai

# DBRX AI env vars 
DBRX_MODEL_ENDPOINT=        # Required if AI_TYPE=dbrx
DBRX_AUTH_TOKEN=${DBRX_AUTH_TOKEN}            # Required if AI_TYPE=dbrx                                   
DBRX_MODEL_NAME=           # Required if AI_TYPE=dbrx

# Advanced AI env vars
AI_TEMPERATURE=              # Optional; Default value is 0.6

# Board Details
BOARD_TYPE=                                                                 # optional default value is "none" supports "none" ,"jira" and "azure"

# Jira board env vars
JIRA_HOST_NAME=                                                                 # Required if TEST_TYPE=functional and BOARD_TYPE=jira
JIRA_EMAIL=                                                                     # Required if TEST_TYPE=functional and BOARD_TYPE=jira
JIRA_TOKEN=${JIRA_TOKEN}                                                                     # Required if TEST_TYPE=functional and BOARD_TYPE=jira
JIRA_ID=                     # Optional if TEST_TYPE=functional and BOARD_TYPE=jira

# Azure board env vars
AZURE_ORG=                                                                      # Required if TEST_TYPE=functional and BOARD_TYPE=azure
AZURE_PROJECT=                                                                  # Required if TEST_TYPE=functional and BOARD_TYPE=azure
AZURE_TOKEN=${AZURE_TOKEN}                                                                    # Required if TEST_TYPE=functional and BOARD_TYPE=azure
AZURE_WORK_ITEM_ID=          # Optional if TEST_TYPE=functional and BOARD_TYPE=azure

# Log env vars
LOG_SOURCE=                                                                 # Optional; Default is elks
LOG_SOURCE_PATH=                                                                # Optional; the log file path
LOG_ELASTICSEARCH_URL=                                                          # Optional; the Elastic search URL
LOG_ELASTICSEARCH_USER=                                                         # Optional; the Elastic search user name
LOG_ELASTICSEARCH_TOKEN=${LOG_ELASTICSEARCH_TOKEN}                                                        # Optional; the Elastic search token
LOG_ELASTICSEARCH_API_KEY=${LOG_ELASTICSEARCH_API_KEY}                                                      # Optional; the Elastic search api key

# Api Spec env vars
API_SPEC_TYPE=                                                           # Optional; Supports [swagger, postman]
API_SPEC_SOURCE=                                                            # Optional; Supports [file, gitpath, url]
API_SPEC_FILE_PATH=                                                             # Optional; path of the source file if source is file/gitpath. Relative path in case of gitpath.
API_SPEC_URL=                                                                   # Optional; URL of the source file if source is url

# Behavioral test cases env vars
BEHAVIORAL_TEST_TYPE=                                                    # Optional; Supports [gherkin]
BEHAVIORAL_TEST_SOURCE=                                                    # Optional; Supports [file, gitpath, url]
BEHAVIORAL_TEST_FILE_PATH=                                                      # Optional; path of the source file if source is file/gitpath. Relative path in case of gitpath.
BEHAVIORAL_TEST_URL=                                                            # Optional; URL of the source file if source is url

# Application test env vars
APPLICATION_ENTRYPOINT=      # required; if you need to generate application tests along with unit tests. This feature is supported only for GPT Turbo models. Use a relative path from the project root.

HTTP_VERBS_FOR_TESTING=      # Optional; Default is "get,post,put,patch,delete", Supports all the combinations of http verbs. The specific http methods to be tested for all APIs. Enter "," seperated values here. 
# HTTP_ENDPOINTS_FOR_TESTING=  # Optional; The specific http endpoints to be tested from the API Spec. Enter "," seperated values here. No input means every endpoint will be tested 
REGEX_HTTP_ENDPOINTS_FOR_TESTING= #Optional; Regex string that matches to specific endpoints that needs to be tested. If empty, all the endpoints will be tested.
